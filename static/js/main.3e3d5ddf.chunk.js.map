{"version":3,"sources":["components/SearchBar.js","components/VideoDetail.js","components/Header.js","components/VideoList.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["ClearBtn","styled","span","_templateObject","StyledFormGroup","FormGroup","_templateObject2","SearchBar","state","search","handleInputChange","event","value","target","_this","setState","props","searchYouTube","_this2","this","react_default","a","createElement","Form","onSubmit","preventDefault","Label","for","hidden","Input","type","name","id","placeholder","onChange","onClick","Component","VideoDetail","_ref","video","console","log","videoId","videoUrl","concat","Fragment","className","src","allowFullScreen","snippet","title","description","StyledHeader","Jumbotron","Header_templateObject","PageHeader","Container","List","ul","VideoList_templateObject","Item","li","VideoList_templateObject2","active","VideoList","children","VideoListItem","selectedVideo","selectVideo","thumbnails","medium","url","API","searchVideos","term","axios","get","params","key","part","q","maxResults","App","videos","then","res","data","items","catch","err","throttledSearch","_","debounce","Header","Row","Col","components_SearchBar","md","components_VideoDetail","VideoList_VideoList","map","VideoList_VideoListItem","playlistId","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e3d5ddf.chunk.js","sourcesContent":["import React, { Component } from \"react\"; //newer syntax of require\r\nimport { Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ClearBtn = styled.span`\r\n    color: gray;\r\n    font-weight: 900;\r\n    font-size: 24px;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 5px;\r\n    cursor: pointer;\r\n\r\n    :hover {\r\n        color: #4fcec6;\r\n    }\r\n`\r\nconst StyledFormGroup = styled(FormGroup)`\r\n    position: relative;\r\n`\r\n\r\nclass SearchBar extends Component {\r\n    state = {\r\n        search: \"\"\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const { value } = event.target;\r\n        //console.log(value); prints exactly what keys are typed \r\n        this.setState({ search: value });\r\n        this.props.searchYouTube(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={(event) => event.preventDefault()}> \r\n                <StyledFormGroup>\r\n                    <Label for=\"search\" hidden>Search</Label>\r\n                    <Input \r\n                        type=\"text\" \r\n                        name=\"search\" \r\n                        id=\"search\" \r\n                        placeholder=\"What would you like to search for?\" \r\n                        value={this.state.search}\r\n                        onChange={this.handleInputChange}\r\n                    />\r\n                    <ClearBtn onClick={() => this.setState({ search: \"\" })}>X</ClearBtn>\r\n                </StyledFormGroup>\r\n            </Form>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SearchBar;","import React from \"react\"; //newer syntax of require\r\n\r\nconst VideoDetail = ({video}) => { //constant reference, cannot be reassigned\r\n//instead of props.video, can use curly brackets to grab it\r\n    if (!video) {\r\n        return <p>Loading spinner goes here...</p>\r\n    }\r\n    console.log(video);\r\n\r\n    const videoId = video.id.videoId;\r\n    const videoUrl = `https://www.youtube.com/embed/${videoId}?rel=0`;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe className=\"embed-responsive-item\" src={videoUrl} allowFullScreen></iframe>\r\n            </div>\r\n            <h2>{video.snippet.title}</h2>\r\n            <p>{video.snippet.description}</p>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default VideoDetail;","import React from \"react\"; //newer syntax of require\r\nimport { Jumbotron, Container } from \"reactstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledHeader = styled(Jumbotron)`\r\n    color: #37908a;\r\n    border-radius: 25px;\r\n`\r\n\r\nconst PageHeader = (props) => {\r\n    return (\r\n      <div>\r\n        <StyledHeader>\r\n          <Container>\r\n            <h1 className=\"display-3\"><strong>React-YouTube</strong></h1>\r\n            <p className=\"lead\">YouTube search application built with React. Search a keyword to get started.</p>\r\n          </Container>\r\n        </StyledHeader>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default PageHeader;","import React from \"react\"; //newer syntax of require\r\nimport styled from \"styled-components\";\r\n\r\nconst List = styled.ul`\r\n    padding: 0;\r\n    list-style-type: none;\r\n`\r\n//item either has active equals true or active equals false\r\n//conditional solid colors based on whether or not it's active\r\n//don't need a separate css styling sheet for different components\r\nconst Item = styled.li`\r\n    img {\r\n        border: ${props => props.active ? \"3px solid #4fcec6\" : \"3px solid #b9b9b9\"}; \r\n        width: 200px;\r\n        margin-bottom: 15px;\r\n        cursor: pointer;\r\n        border-radius: 5px;\r\n\r\n        :hover {\r\n            border-color: #1531b7;\r\n        }\r\n    }\r\n`\r\n\r\nexport const VideoList = (props) => {\r\n    return (\r\n        <List>\r\n            {props.children} \r\n        </List>\r\n    )\r\n};\r\n//have to wrap an anonymous function around a function that needs a value inside it. If you are just referencing it then you don't need to\r\nexport const VideoListItem = ({ video, selectedVideo, selectVideo }) => {\r\n    return (\r\n        <Item active={video === selectedVideo} onClick={() => selectVideo(video)}>\r\n            <img src={video.snippet.thumbnails.medium.url} />\r\n        </Item>\r\n    )\r\n};","import axios from \"axios\";\r\nconst apiKey = \"AIzaSyBTTxprPNI4u3hpR-2W9JVpMae_ehutaiM\";\r\n\r\n\r\nexport default {\r\n    searchVideos: function(term) {\r\n        return axios.get(`https://www.googleapis.com/youtube/v3/search`, {\r\n            params: {\r\n                key: apiKey,\r\n                part: \"snippet\",\r\n                q: term,\r\n                maxResults: 8\r\n            }\r\n        })\r\n    }\r\n};","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport _ from \"lodash\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport VideoDetail from \"./components/VideoDetail\";\r\nimport PageHeader from \"./components/Header\";\r\nimport { VideoList, VideoListItem } from \"./components/VideoList\";\r\nimport API from \"./utils/API\";\r\n\r\n//this allows the component did mount and render to work\r\nclass App extends Component {\r\n  //state will reload the page every time one of these things is true\r\n  state = {\r\n    videos: [],\r\n    selectedVideo: null,\r\n  };\r\n  //called the first time the site renders\r\n  //do the set up for the application - know you have a component on the page\r\n  componentDidMount() {\r\n    this.searchYouTube(\"kittens in buckets\");\r\n  };\r\n  \r\n  searchYouTube = term => {\r\n    API.searchVideos(term)\r\n    .then(res => this.setState({ videos: res.data.items, selectedVideo: res.data.items[0] }))\r\n    .catch(err => console.log(err));\r\n  };\r\n\r\n  selectVideo = video => {\r\n    this.setState({ selectedVideo: video });\r\n  }\r\n\r\n  throttledSearch = _.debounce(this.searchYouTube, 800);\r\n\r\n  render() {\r\n    return (\r\n        <Container>\r\n            <PageHeader />\r\n\r\n            <Row>\r\n            <Col>\r\n                <SearchBar searchYouTube={this.throttledSearch} />\r\n            </Col>\r\n            </Row>\r\n            <Row>\r\n            <Col md=\"9\">\r\n                <VideoDetail video={this.state.selectedVideo} />\r\n            </Col>\r\n            <Col md=\"3\">\r\n                <VideoList>\r\n                {this.state.videos.map(video => (\r\n                    <VideoListItem \r\n                    video={video} \r\n                    key={video.id.videoId || video.id.playlistId} //special key that React uses and it never changes-- we can't use it\r\n                    selectedVideo={this.state.selectedVideo} \r\n                    selectVideo={this.selectVideo}\r\n                    /> \r\n                ))}\r\n                </VideoList>\r\n            </Col>\r\n            </Row>\r\n        </Container>\r\n      \r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}